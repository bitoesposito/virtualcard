services:

  api:
    build:
      context: ./api
    volumes:
      - ./api:/src/app
    command: npm run start:dev
    env_file:
      - .env
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - DATABASE_URL=${DATABASE_URL}
      - PORT=${PORT}
    ports:
      - 3000:3000
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: ./api

  # frontend:
  #   build:
  #     dockerfile: Dockerfile
  #     context: ./frontend
  #   command: npm run start
  #   volumes:
  #     - ./frontend:/frontend/src/app
  #     - /frontend/src/app/node_modules
  #   ports:
  #     - 4200:4200
  #   links:
  #     - api
  #   depends_on:
  #     - api

  postgres:
    image: postgres:latest
    environment:
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_HASHED_PASSWORD: ${ADMIN_HASHED_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - 35000:5432
    volumes:
      - ./api/src/database/seed/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5